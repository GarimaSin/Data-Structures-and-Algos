package Recursion;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Transportation {
	
	static int cap;
	static int endStat;
	static int totOrders;
	static int orders[][];
	static int max;
	static int removePassengers[];
	static boolean[] vis;
	static int maxStat;

	public static void main(String args[]) throws FileNotFoundException{
		Scanner sc = new Scanner(new FileInputStream("Transportation.txt"));
		int T = sc.nextInt();
		for (int test_case = 1; test_case <= 1; test_case++) {
			cap = sc.nextInt();
			endStat = sc.nextInt();
			totOrders = sc.nextInt();
			orders = new int[totOrders][4];
			vis = new boolean[totOrders];
			max = 0; maxStat = 0;
			removePassengers = new int[endStat+1];
			if(cap <= 0){
				System.out.println("Case #"+ (test_case+1));
				System.out.println(0);
			} else {
				for(int i=0; i<totOrders; i++){
					for(int j=0; j<3; j++){
						orders[i][j] = sc.nextInt();
					}
//					removePassengers[orders[i][1]] = removePassengers[orders[i][1]] + orders[i][2];
					if(orders[i][1] <= endStat && orders[i][0] >= 0)
						orders[i][3] = (orders[i][1] - orders[i][0]) * orders[i][2];
					else
						orders[i][3] = -1;
				}
			}
//			findCost(0,0);
			printAllKLengthRec(new int[4], 0);
		}
	}

	//Calculates the cost based on the sequence generated by printAllKLengthRec().
	private static void findCost(int count, int cost, int[] temp) {
		boolean firstEntry = false;
		int prevStartSt = 0, prevEndSt = 0, prevPassengerCount = 0;
		for(int i=0; i<totOrders; i++){
			if(temp[i] == 1){
				if(!firstEntry){
					firstEntry = true;
					prevStartSt = orders[i][0];
					prevEndSt = orders[i][1];
					prevPassengerCount = orders[i][2];
					cost = orders[i][3];
					removePassengers[orders[i][1]] = orders[i][2];
					continue;
				} else {
					int curStartSt = orders[i][0];
					int curEndSt = orders[i][1];
					int curPassengerCount = orders[i][2];
					if(curStartSt >= prevEndSt){
						count = curPassengerCount;
						cost = cost + orders[i][3];
					} else {
						
					}
				}
			}
		}
	}
	
	
	// Generates all combinations of orders, for these sequence max. cost can be calculated.
	static void printAllKLengthRec(int temp[], int count) {
        if (count >= totOrders) {
        	findCost(count, 0, temp);
            return;
        }
 
        for (int i = 0; i < 2; ++i) {
			temp[count] = i;
            printAllKLengthRec(temp, count+1); 
        }
    }
}

/* 
Case #1 19
Case #2 34
*/

/***
 * 10 3 4
0 2 1
1 3 5
1 2 7
2 3 10

10 = Max. capacity of passengers
3 = End Station
4 = Total Orders
4 orders follows -
1) 0 = start station, 2 = end station, 1 = value per passenger
2) 1 = start station, 3 = end station, 5 = value per passenger 
.......
And so on.

Value is calculated as: 
2 - 0 = 2 * 1 = 2
3-1 = 2*5 = 10
2-1 = 1*7 = 7
3-2 = 1*10 = 10
 * ***/
